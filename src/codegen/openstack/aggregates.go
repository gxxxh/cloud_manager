package openstack

// Code generated by cloud manager.





import (
    "github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/aggregates"
    "github.com/gophercloud/gophercloud/pagination"
)
//request struct for the ListAggregates
type ListAggregatesRequest struct{
}

func NewListAggregatesRequest()*ListAggregatesRequest{
    return &ListAggregatesRequest{}
}

//response struct for the ListAggregates
type ListAggregatesResponse struct{
    Pager pagination.Pager
}

func NewListAggregatesResponse(pager pagination.Pager,)*ListAggregatesResponse {
    return &ListAggregatesResponse{
            Pager:pager,
    }
}

// action function
func (oc *OpenstackClient) ListAggregates(request *ListAggregatesRequest)(*ListAggregatesResponse){
    return NewListAggregatesResponse(aggregates.List(oc.client, ))

}
//request struct for the CreateAggregates
type CreateAggregatesRequest struct{
    opts aggregates.CreateOpts
}

func NewCreateAggregatesRequest()*CreateAggregatesRequest{
    return &CreateAggregatesRequest{}
}

//response struct for the CreateAggregates
type CreateAggregatesResponse struct{
    CreateResult aggregates.CreateResult
}

func NewCreateAggregatesResponse(createResult aggregates.CreateResult,)*CreateAggregatesResponse {
    return &CreateAggregatesResponse{
            CreateResult:createResult,
    }
}

// action function
func (oc *OpenstackClient) CreateAggregates(request *CreateAggregatesRequest)(*CreateAggregatesResponse){
    return NewCreateAggregatesResponse(aggregates.Create(oc.client,request.opts, ))

}
//request struct for the DeleteAggregates
type DeleteAggregatesRequest struct{
    aggregateID int
}

func NewDeleteAggregatesRequest()*DeleteAggregatesRequest{
    return &DeleteAggregatesRequest{}
}

//response struct for the DeleteAggregates
type DeleteAggregatesResponse struct{
    DeleteResult aggregates.DeleteResult
}

func NewDeleteAggregatesResponse(deleteResult aggregates.DeleteResult,)*DeleteAggregatesResponse {
    return &DeleteAggregatesResponse{
            DeleteResult:deleteResult,
    }
}

// action function
func (oc *OpenstackClient) DeleteAggregates(request *DeleteAggregatesRequest)(*DeleteAggregatesResponse){
    return NewDeleteAggregatesResponse(aggregates.Delete(oc.client,request.aggregateID, ))

}
//request struct for the GetAggregates
type GetAggregatesRequest struct{
    aggregateID int
}

func NewGetAggregatesRequest()*GetAggregatesRequest{
    return &GetAggregatesRequest{}
}

//response struct for the GetAggregates
type GetAggregatesResponse struct{
    GetResult aggregates.GetResult
}

func NewGetAggregatesResponse(getResult aggregates.GetResult,)*GetAggregatesResponse {
    return &GetAggregatesResponse{
            GetResult:getResult,
    }
}

// action function
func (oc *OpenstackClient) GetAggregates(request *GetAggregatesRequest)(*GetAggregatesResponse){
    return NewGetAggregatesResponse(aggregates.Get(oc.client,request.aggregateID, ))

}
//request struct for the UpdateAggregates
type UpdateAggregatesRequest struct{
    aggregateID int
    opts aggregates.UpdateOpts
}

func NewUpdateAggregatesRequest()*UpdateAggregatesRequest{
    return &UpdateAggregatesRequest{}
}

//response struct for the UpdateAggregates
type UpdateAggregatesResponse struct{
    UpdateResult aggregates.UpdateResult
}

func NewUpdateAggregatesResponse(updateResult aggregates.UpdateResult,)*UpdateAggregatesResponse {
    return &UpdateAggregatesResponse{
            UpdateResult:updateResult,
    }
}

// action function
func (oc *OpenstackClient) UpdateAggregates(request *UpdateAggregatesRequest)(*UpdateAggregatesResponse){
    return NewUpdateAggregatesResponse(aggregates.Update(oc.client,request.aggregateID,request.opts, ))

}
//request struct for the AddHostAggregates
type AddHostAggregatesRequest struct{
    aggregateID int
    opts aggregates.AddHostOpts
}

func NewAddHostAggregatesRequest()*AddHostAggregatesRequest{
    return &AddHostAggregatesRequest{}
}

//response struct for the AddHostAggregates
type AddHostAggregatesResponse struct{
    ActionResult aggregates.ActionResult
}

func NewAddHostAggregatesResponse(actionResult aggregates.ActionResult,)*AddHostAggregatesResponse {
    return &AddHostAggregatesResponse{
            ActionResult:actionResult,
    }
}

// action function
func (oc *OpenstackClient) AddHostAggregates(request *AddHostAggregatesRequest)(*AddHostAggregatesResponse){
    return NewAddHostAggregatesResponse(aggregates.AddHost(oc.client,request.aggregateID,request.opts, ))

}
//request struct for the RemoveHostAggregates
type RemoveHostAggregatesRequest struct{
    aggregateID int
    opts aggregates.RemoveHostOpts
}

func NewRemoveHostAggregatesRequest()*RemoveHostAggregatesRequest{
    return &RemoveHostAggregatesRequest{}
}

//response struct for the RemoveHostAggregates
type RemoveHostAggregatesResponse struct{
    ActionResult aggregates.ActionResult
}

func NewRemoveHostAggregatesResponse(actionResult aggregates.ActionResult,)*RemoveHostAggregatesResponse {
    return &RemoveHostAggregatesResponse{
            ActionResult:actionResult,
    }
}

// action function
func (oc *OpenstackClient) RemoveHostAggregates(request *RemoveHostAggregatesRequest)(*RemoveHostAggregatesResponse){
    return NewRemoveHostAggregatesResponse(aggregates.RemoveHost(oc.client,request.aggregateID,request.opts, ))

}
//request struct for the SetMetadataAggregates
type SetMetadataAggregatesRequest struct{
    aggregateID int
    opts aggregates.SetMetadataOpts
}

func NewSetMetadataAggregatesRequest()*SetMetadataAggregatesRequest{
    return &SetMetadataAggregatesRequest{}
}

//response struct for the SetMetadataAggregates
type SetMetadataAggregatesResponse struct{
    ActionResult aggregates.ActionResult
}

func NewSetMetadataAggregatesResponse(actionResult aggregates.ActionResult,)*SetMetadataAggregatesResponse {
    return &SetMetadataAggregatesResponse{
            ActionResult:actionResult,
    }
}

// action function
func (oc *OpenstackClient) SetMetadataAggregates(request *SetMetadataAggregatesRequest)(*SetMetadataAggregatesResponse){
    return NewSetMetadataAggregatesResponse(aggregates.SetMetadata(oc.client,request.aggregateID,request.opts, ))

}