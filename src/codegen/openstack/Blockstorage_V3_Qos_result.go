package openstack

// Code generated by cloud manager.

import (
    "github.com/gophercloud/gophercloud/openstack/blockstorage/v3/qos"
)


// call result's extract function
func ExtractCreateBlockstorageV3QosResponse(response *CreateBlockstorageV3QosResponse)(interface{}, error){
    return response.CreateResult.Body, response.CreateResult.Err
}



// call result's extract function
func ExtractDeleteBlockstorageV3QosResponse(response *DeleteBlockstorageV3QosResponse)(interface{}, error){
    return response.DeleteResult.Body, response.DeleteResult.Err
}



//extract response info from pager for ListBlockstorageV3Qos
func ExtractListBlockstorageV3QosResponse(response *ListBlockstorageV3QosResponse)([]qos.QoS,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return qos.ExtractQoS(page)
}


// call result's extract function
func ExtractGetBlockstorageV3QosResponse(response *GetBlockstorageV3QosResponse)(interface{}, error){
    return response.GetResult.Body, response.GetResult.Err
}



// call result's extract function
func ExtractDeleteKeysBlockstorageV3QosResponse(response *DeleteKeysBlockstorageV3QosResponse)(interface{}, error){
    return response.DeleteResult.Body, response.DeleteResult.Err
}



// call result's extract function
func ExtractAssociateBlockstorageV3QosResponse(response *AssociateBlockstorageV3QosResponse)(interface{}, error){
    return response.AssociateResult.Body, response.AssociateResult.Err
}



// call result's extract function
func ExtractDisassociateBlockstorageV3QosResponse(response *DisassociateBlockstorageV3QosResponse)(interface{}, error){
    return response.DisassociateResult.Body, response.DisassociateResult.Err
}



// call result's extract function
func ExtractDisassociateAllBlockstorageV3QosResponse(response *DisassociateAllBlockstorageV3QosResponse)(interface{}, error){
    return response.DisassociateAllResult.Body, response.DisassociateAllResult.Err
}



//extract response info from pager for ListAssociationsBlockstorageV3Qos
func ExtractListAssociationsBlockstorageV3QosResponse(response *ListAssociationsBlockstorageV3QosResponse)([]qos.QosAssociation,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return qos.ExtractAssociations(page)
}