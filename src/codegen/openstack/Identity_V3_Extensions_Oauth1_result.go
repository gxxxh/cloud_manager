package openstack

// Code generated by cloud manager.

import (
    "github.com/gophercloud/gophercloud/openstack/identity/v3/extensions/oauth1"
)


// call result's extract function
func ExtractCreateIdentityV3ExtensionsOauth1Response(response *CreateIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.CreateResult.Body, response.CreateResult.Err
}



// call result's extract function
func ExtractCreateConsumerIdentityV3ExtensionsOauth1Response(response *CreateConsumerIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.CreateConsumerResult.Body, response.CreateConsumerResult.Err
}



// call result's extract function
func ExtractDeleteConsumerIdentityV3ExtensionsOauth1Response(response *DeleteConsumerIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.DeleteConsumerResult.Body, response.DeleteConsumerResult.Err
}



//extract response info from pager for ListConsumersIdentityV3ExtensionsOauth1
func ExtractListConsumersIdentityV3ExtensionsOauth1Response(response *ListConsumersIdentityV3ExtensionsOauth1Response)([]oauth1.Consumer,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return oauth1.ExtractConsumers(page)
}


// call result's extract function
func ExtractGetConsumerIdentityV3ExtensionsOauth1Response(response *GetConsumerIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.GetConsumerResult.Body, response.GetConsumerResult.Err
}



// call result's extract function
func ExtractUpdateConsumerIdentityV3ExtensionsOauth1Response(response *UpdateConsumerIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.UpdateConsumerResult.Body, response.UpdateConsumerResult.Err
}



// call result's extract function
func ExtractRequestTokenIdentityV3ExtensionsOauth1Response(response *RequestTokenIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.TokenResult.Body, response.TokenResult.Err
}



// call result's extract function
func ExtractAuthorizeTokenIdentityV3ExtensionsOauth1Response(response *AuthorizeTokenIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.AuthorizeTokenResult.Body, response.AuthorizeTokenResult.Err
}



// call result's extract function
func ExtractCreateAccessTokenIdentityV3ExtensionsOauth1Response(response *CreateAccessTokenIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.TokenResult.Body, response.TokenResult.Err
}



// call result's extract function
func ExtractGetAccessTokenIdentityV3ExtensionsOauth1Response(response *GetAccessTokenIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.GetAccessTokenResult.Body, response.GetAccessTokenResult.Err
}



// call result's extract function
func ExtractRevokeAccessTokenIdentityV3ExtensionsOauth1Response(response *RevokeAccessTokenIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.RevokeAccessTokenResult.Body, response.RevokeAccessTokenResult.Err
}



//extract response info from pager for ListAccessTokensIdentityV3ExtensionsOauth1
func ExtractListAccessTokensIdentityV3ExtensionsOauth1Response(response *ListAccessTokensIdentityV3ExtensionsOauth1Response)([]oauth1.AccessToken,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return oauth1.ExtractAccessTokens(page)
}


//extract response info from pager for ListAccessTokenRolesIdentityV3ExtensionsOauth1
func ExtractListAccessTokenRolesIdentityV3ExtensionsOauth1Response(response *ListAccessTokenRolesIdentityV3ExtensionsOauth1Response)([]oauth1.AccessTokenRole,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return oauth1.ExtractAccessTokenRoles(page)
}


// call result's extract function
func ExtractGetAccessTokenRoleIdentityV3ExtensionsOauth1Response(response *GetAccessTokenRoleIdentityV3ExtensionsOauth1Response)(interface{}, error){
    return response.GetAccessTokenRoleResult.Body, response.GetAccessTokenRoleResult.Err
}
