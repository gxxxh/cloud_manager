package openstack

// Code generated by cloud manager.

import (
    "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/qos/rules"
)


//extract response info from pager for ListBandwidthLimitRulesNetworkingV2ExtensionsQosRules
func ExtractListBandwidthLimitRulesNetworkingV2ExtensionsQosRulesResponse(response *ListBandwidthLimitRulesNetworkingV2ExtensionsQosRulesResponse)([]rules.BandwidthLimitRule,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return rules.ExtractBandwidthLimitRules(page)
}


// call result's extract function
func ExtractGetBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse(response *GetBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.GetBandwidthLimitRuleResult.Body, response.GetBandwidthLimitRuleResult.Err
}



// call result's extract function
func ExtractCreateBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse(response *CreateBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.CreateBandwidthLimitRuleResult.Body, response.CreateBandwidthLimitRuleResult.Err
}



// call result's extract function
func ExtractUpdateBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse(response *UpdateBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.UpdateBandwidthLimitRuleResult.Body, response.UpdateBandwidthLimitRuleResult.Err
}



// call result's extract function
func ExtractDeleteBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse(response *DeleteBandwidthLimitRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.DeleteBandwidthLimitRuleResult.Body, response.DeleteBandwidthLimitRuleResult.Err
}



//extract response info from pager for ListDSCPMarkingRulesNetworkingV2ExtensionsQosRules
func ExtractListDSCPMarkingRulesNetworkingV2ExtensionsQosRulesResponse(response *ListDSCPMarkingRulesNetworkingV2ExtensionsQosRulesResponse)([]rules.DSCPMarkingRule,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return rules.ExtractDSCPMarkingRules(page)
}


// call result's extract function
func ExtractGetDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse(response *GetDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.GetDSCPMarkingRuleResult.Body, response.GetDSCPMarkingRuleResult.Err
}



// call result's extract function
func ExtractCreateDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse(response *CreateDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.CreateDSCPMarkingRuleResult.Body, response.CreateDSCPMarkingRuleResult.Err
}



// call result's extract function
func ExtractUpdateDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse(response *UpdateDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.UpdateDSCPMarkingRuleResult.Body, response.UpdateDSCPMarkingRuleResult.Err
}



// call result's extract function
func ExtractDeleteDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse(response *DeleteDSCPMarkingRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.DeleteDSCPMarkingRuleResult.Body, response.DeleteDSCPMarkingRuleResult.Err
}



//extract response info from pager for ListMinimumBandwidthRulesNetworkingV2ExtensionsQosRules
func ExtractListMinimumBandwidthRulesNetworkingV2ExtensionsQosRulesResponse(response *ListMinimumBandwidthRulesNetworkingV2ExtensionsQosRulesResponse)([]rules.MinimumBandwidthRule,error){
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return rules.ExtractMinimumBandwidthRules(page)
}


// call result's extract function
func ExtractGetMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse(response *GetMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.GetMinimumBandwidthRuleResult.Body, response.GetMinimumBandwidthRuleResult.Err
}



// call result's extract function
func ExtractCreateMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse(response *CreateMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.CreateMinimumBandwidthRuleResult.Body, response.CreateMinimumBandwidthRuleResult.Err
}



// call result's extract function
func ExtractUpdateMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse(response *UpdateMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.UpdateMinimumBandwidthRuleResult.Body, response.UpdateMinimumBandwidthRuleResult.Err
}



// call result's extract function
func ExtractDeleteMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse(response *DeleteMinimumBandwidthRuleNetworkingV2ExtensionsQosRulesResponse)(interface{}, error){
    return response.DeleteMinimumBandwidthRuleResult.Body, response.DeleteMinimumBandwidthRuleResult.Err
}
