package openstack

// Code generated by cloud manager.





import (
    "github.com/gophercloud/gophercloud/openstack/loadbalancer/v2/monitors"
    "github.com/gophercloud/gophercloud/pagination"
)
//request struct for the ListLoadbalancerV2Monitors
type ListLoadbalancerV2MonitorsRequest struct{
    Opts monitors.ListOptsBuilder
}

func NewListLoadbalancerV2MonitorsRequest()*ListLoadbalancerV2MonitorsRequest{
    return &ListLoadbalancerV2MonitorsRequest{}
}

//response struct for the ListLoadbalancerV2Monitors
type ListLoadbalancerV2MonitorsResponse struct{
    Pager pagination.Pager
}

func NewListLoadbalancerV2MonitorsResponse(pager pagination.Pager,)*ListLoadbalancerV2MonitorsResponse {
    return &ListLoadbalancerV2MonitorsResponse{
            Pager:pager,
    }
}

// action function
func (oc *OpenstackClient) ListLoadbalancerV2Monitors(req *ListLoadbalancerV2MonitorsRequest)(*ListLoadbalancerV2MonitorsResponse){
    return NewListLoadbalancerV2MonitorsResponse(monitors.List(oc.client,req.Opts, ))

}
//request struct for the CreateLoadbalancerV2Monitors
type CreateLoadbalancerV2MonitorsRequest struct{
    Opts monitors.CreateOptsBuilder
}

func NewCreateLoadbalancerV2MonitorsRequest()*CreateLoadbalancerV2MonitorsRequest{
    return &CreateLoadbalancerV2MonitorsRequest{}
}

//response struct for the CreateLoadbalancerV2Monitors
type CreateLoadbalancerV2MonitorsResponse struct{
    CreateResult monitors.CreateResult
}

func NewCreateLoadbalancerV2MonitorsResponse(createResult monitors.CreateResult,)*CreateLoadbalancerV2MonitorsResponse {
    return &CreateLoadbalancerV2MonitorsResponse{
            CreateResult:createResult,
    }
}

// action function
func (oc *OpenstackClient) CreateLoadbalancerV2Monitors(req *CreateLoadbalancerV2MonitorsRequest)(*CreateLoadbalancerV2MonitorsResponse){
    return NewCreateLoadbalancerV2MonitorsResponse(monitors.Create(oc.client,req.Opts, ))

}
//request struct for the GetLoadbalancerV2Monitors
type GetLoadbalancerV2MonitorsRequest struct{
    Id string
}

func NewGetLoadbalancerV2MonitorsRequest()*GetLoadbalancerV2MonitorsRequest{
    return &GetLoadbalancerV2MonitorsRequest{}
}

//response struct for the GetLoadbalancerV2Monitors
type GetLoadbalancerV2MonitorsResponse struct{
    GetResult monitors.GetResult
}

func NewGetLoadbalancerV2MonitorsResponse(getResult monitors.GetResult,)*GetLoadbalancerV2MonitorsResponse {
    return &GetLoadbalancerV2MonitorsResponse{
            GetResult:getResult,
    }
}

// action function
func (oc *OpenstackClient) GetLoadbalancerV2Monitors(req *GetLoadbalancerV2MonitorsRequest)(*GetLoadbalancerV2MonitorsResponse){
    return NewGetLoadbalancerV2MonitorsResponse(monitors.Get(oc.client,req.Id, ))

}
//request struct for the UpdateLoadbalancerV2Monitors
type UpdateLoadbalancerV2MonitorsRequest struct{
    Id string
    Opts monitors.UpdateOptsBuilder
}

func NewUpdateLoadbalancerV2MonitorsRequest()*UpdateLoadbalancerV2MonitorsRequest{
    return &UpdateLoadbalancerV2MonitorsRequest{}
}

//response struct for the UpdateLoadbalancerV2Monitors
type UpdateLoadbalancerV2MonitorsResponse struct{
    UpdateResult monitors.UpdateResult
}

func NewUpdateLoadbalancerV2MonitorsResponse(updateResult monitors.UpdateResult,)*UpdateLoadbalancerV2MonitorsResponse {
    return &UpdateLoadbalancerV2MonitorsResponse{
            UpdateResult:updateResult,
    }
}

// action function
func (oc *OpenstackClient) UpdateLoadbalancerV2Monitors(req *UpdateLoadbalancerV2MonitorsRequest)(*UpdateLoadbalancerV2MonitorsResponse){
    return NewUpdateLoadbalancerV2MonitorsResponse(monitors.Update(oc.client,req.Id,req.Opts, ))

}
//request struct for the DeleteLoadbalancerV2Monitors
type DeleteLoadbalancerV2MonitorsRequest struct{
    Id string
}

func NewDeleteLoadbalancerV2MonitorsRequest()*DeleteLoadbalancerV2MonitorsRequest{
    return &DeleteLoadbalancerV2MonitorsRequest{}
}

//response struct for the DeleteLoadbalancerV2Monitors
type DeleteLoadbalancerV2MonitorsResponse struct{
    DeleteResult monitors.DeleteResult
}

func NewDeleteLoadbalancerV2MonitorsResponse(deleteResult monitors.DeleteResult,)*DeleteLoadbalancerV2MonitorsResponse {
    return &DeleteLoadbalancerV2MonitorsResponse{
            DeleteResult:deleteResult,
    }
}

// action function
func (oc *OpenstackClient) DeleteLoadbalancerV2Monitors(req *DeleteLoadbalancerV2MonitorsRequest)(*DeleteLoadbalancerV2MonitorsResponse){
    return NewDeleteLoadbalancerV2MonitorsResponse(monitors.Delete(oc.client,req.Id, ))

}