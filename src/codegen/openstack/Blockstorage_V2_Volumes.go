package openstack

// Code generated by cloud manager.





import (
    "github.com/gophercloud/gophercloud/openstack/blockstorage/v2/volumes"
    "github.com/gophercloud/gophercloud/pagination"
)
//request struct for the CreateBlockstorageV2Volumes
type CreateBlockstorageV2VolumesRequest struct{
    Opts volumes.CreateOptsBuilder
}

func NewCreateBlockstorageV2VolumesRequest()*CreateBlockstorageV2VolumesRequest{
    return &CreateBlockstorageV2VolumesRequest{}
}

//response struct for the CreateBlockstorageV2Volumes
type CreateBlockstorageV2VolumesResponse struct{
    CreateResult volumes.CreateResult
}

func NewCreateBlockstorageV2VolumesResponse(createResult volumes.CreateResult,)*CreateBlockstorageV2VolumesResponse {
    return &CreateBlockstorageV2VolumesResponse{
            CreateResult:createResult,
    }
}

// action function
func (oc *OpenstackClient) CreateBlockstorageV2Volumes(request *CreateBlockstorageV2VolumesRequest)(*CreateBlockstorageV2VolumesResponse){
    return NewCreateBlockstorageV2VolumesResponse(volumes.Create(oc.client,request.Opts, ))

}
//request struct for the DeleteBlockstorageV2Volumes
type DeleteBlockstorageV2VolumesRequest struct{
    Id string
    Opts volumes.DeleteOptsBuilder
}

func NewDeleteBlockstorageV2VolumesRequest()*DeleteBlockstorageV2VolumesRequest{
    return &DeleteBlockstorageV2VolumesRequest{}
}

//response struct for the DeleteBlockstorageV2Volumes
type DeleteBlockstorageV2VolumesResponse struct{
    DeleteResult volumes.DeleteResult
}

func NewDeleteBlockstorageV2VolumesResponse(deleteResult volumes.DeleteResult,)*DeleteBlockstorageV2VolumesResponse {
    return &DeleteBlockstorageV2VolumesResponse{
            DeleteResult:deleteResult,
    }
}

// action function
func (oc *OpenstackClient) DeleteBlockstorageV2Volumes(request *DeleteBlockstorageV2VolumesRequest)(*DeleteBlockstorageV2VolumesResponse){
    return NewDeleteBlockstorageV2VolumesResponse(volumes.Delete(oc.client,request.Id,request.Opts, ))

}
//request struct for the GetBlockstorageV2Volumes
type GetBlockstorageV2VolumesRequest struct{
    Id string
}

func NewGetBlockstorageV2VolumesRequest()*GetBlockstorageV2VolumesRequest{
    return &GetBlockstorageV2VolumesRequest{}
}

//response struct for the GetBlockstorageV2Volumes
type GetBlockstorageV2VolumesResponse struct{
    GetResult volumes.GetResult
}

func NewGetBlockstorageV2VolumesResponse(getResult volumes.GetResult,)*GetBlockstorageV2VolumesResponse {
    return &GetBlockstorageV2VolumesResponse{
            GetResult:getResult,
    }
}

// action function
func (oc *OpenstackClient) GetBlockstorageV2Volumes(request *GetBlockstorageV2VolumesRequest)(*GetBlockstorageV2VolumesResponse){
    return NewGetBlockstorageV2VolumesResponse(volumes.Get(oc.client,request.Id, ))

}
//request struct for the ListBlockstorageV2Volumes
type ListBlockstorageV2VolumesRequest struct{
    Opts volumes.ListOptsBuilder
}

func NewListBlockstorageV2VolumesRequest()*ListBlockstorageV2VolumesRequest{
    return &ListBlockstorageV2VolumesRequest{}
}

//response struct for the ListBlockstorageV2Volumes
type ListBlockstorageV2VolumesResponse struct{
    Pager pagination.Pager
}

func NewListBlockstorageV2VolumesResponse(pager pagination.Pager,)*ListBlockstorageV2VolumesResponse {
    return &ListBlockstorageV2VolumesResponse{
            Pager:pager,
    }
}

// action function
func (oc *OpenstackClient) ListBlockstorageV2Volumes(request *ListBlockstorageV2VolumesRequest)(*ListBlockstorageV2VolumesResponse){
    return NewListBlockstorageV2VolumesResponse(volumes.List(oc.client,request.Opts, ))

}
//request struct for the UpdateBlockstorageV2Volumes
type UpdateBlockstorageV2VolumesRequest struct{
    Id string
    Opts volumes.UpdateOptsBuilder
}

func NewUpdateBlockstorageV2VolumesRequest()*UpdateBlockstorageV2VolumesRequest{
    return &UpdateBlockstorageV2VolumesRequest{}
}

//response struct for the UpdateBlockstorageV2Volumes
type UpdateBlockstorageV2VolumesResponse struct{
    UpdateResult volumes.UpdateResult
}

func NewUpdateBlockstorageV2VolumesResponse(updateResult volumes.UpdateResult,)*UpdateBlockstorageV2VolumesResponse {
    return &UpdateBlockstorageV2VolumesResponse{
            UpdateResult:updateResult,
    }
}

// action function
func (oc *OpenstackClient) UpdateBlockstorageV2Volumes(request *UpdateBlockstorageV2VolumesRequest)(*UpdateBlockstorageV2VolumesResponse){
    return NewUpdateBlockstorageV2VolumesResponse(volumes.Update(oc.client,request.Id,request.Opts, ))

}