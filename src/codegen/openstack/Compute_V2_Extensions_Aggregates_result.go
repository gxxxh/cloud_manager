package openstack

// Code generated by cloud manager.

import (
	"github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/aggregates"
)

// extract response info from pager for ListComputeV2ExtensionsAggregates
func ExtractListComputeV2ExtensionsAggregatesResponse(response *ListComputeV2ExtensionsAggregatesResponse) ([]aggregates.Aggregate, error) {
	page, err := response.Pager.AllPages()
	if err != nil {
		return nil, err
	}
	return aggregates.ExtractAggregates(page)
}

// call result's extract function
func ExtractCreateComputeV2ExtensionsAggregatesResponse(response *CreateComputeV2ExtensionsAggregatesResponse) (interface{}, error) {
	return response.CreateResult.Body, response.CreateResult.Err
}

// call result's extract function
func ExtractDeleteComputeV2ExtensionsAggregatesResponse(response *DeleteComputeV2ExtensionsAggregatesResponse) (interface{}, error) {
	return response.DeleteResult.Body, response.DeleteResult.Err
}

// call result's extract function
func ExtractGetComputeV2ExtensionsAggregatesResponse(response *GetComputeV2ExtensionsAggregatesResponse) (interface{}, error) {
	return response.GetResult.Body, response.GetResult.Err
}

// call result's extract function
func ExtractUpdateComputeV2ExtensionsAggregatesResponse(response *UpdateComputeV2ExtensionsAggregatesResponse) (interface{}, error) {
	return response.UpdateResult.Body, response.UpdateResult.Err
}

// call result's extract function
func ExtractAddHostComputeV2ExtensionsAggregatesResponse(response *AddHostComputeV2ExtensionsAggregatesResponse) (interface{}, error) {
	return response.ActionResult.Body, response.ActionResult.Err
}

// call result's extract function
func ExtractRemoveHostComputeV2ExtensionsAggregatesResponse(response *RemoveHostComputeV2ExtensionsAggregatesResponse) (interface{}, error) {
	return response.ActionResult.Body, response.ActionResult.Err
}

// call result's extract function
func ExtractSetMetadataComputeV2ExtensionsAggregatesResponse(response *SetMetadataComputeV2ExtensionsAggregatesResponse) (interface{}, error) {
	return response.ActionResult.Body, response.ActionResult.Err
}
