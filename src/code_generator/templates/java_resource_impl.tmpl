{{- $CloudName := Param "CloudName" -}}
/**
* Code Generator by multicloud_service
*/
package io.github.kubestack.client.impl.{{ToLower $CloudName}};

import java.util.regex.Pattern;

import io.github.kubestack.client.KubeStackClient;
import io.github.kubestack.client.api.models.{{ToLower $CloudName}}.{{.Name}};
import io.github.kubestack.client.api.specs.{{ToLower $CloudName}}.{{.Name}}Spec;
import io.github.kubestack.client.api.specs.{{ToLower $CloudName}}.SecretRef;
import io.github.kubestack.client.api.specs.{{ToLower $CloudName}}.{{ToLower .Name}}.Lifecycle;
import io.github.kubestack.client.impl.AbstractImpl;
import io.github.kubestack.core.utils.RegExpUtils;

/**
 * @Description {{.Name}} operation impl
 * @Date 2023/2/8 16:45
 * @Author guohao
 **/
@SuppressWarnings("deprecation")
public class {{.Name}}Impl extends AbstractImpl<{{.Name}}, {{.Name}}Spec> {

    public {{.Name}}Impl(KubeStackClient client, String kind) {
        super(client, kind);
    }

    {{- range .MemberVariables}}
    {{- $ActionName := LowerFirst .Name -}}
    public boolean {{$ActionName}}(String name, Lifecycle.{{.Name}} {{$ActionName}}, SecretRef secretRef) throws Exception{
        Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
        if (!pattern.matcher(name).matches()) {
            throw new IllegalArgumentException(
                "the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
        }
        {{if (eq $ActionName "create")}}
        return create(getModel(), createMetadata(name, null, null),
                    createSpec(createLifecycle({{$ActionName}}), secretRef));
        {{else}}
        return update(name, updateMetadata(name, null), {{$ActionName}});
        {{end}}
    }

    {{ end }}

    @Override
    protected Class<?> getModelClass() {
        return {{.Name}}.class;
    }

    @Override
    protected {{.Name}} getModel() {
        return new {{.Name}}();
    }

    @Override
    protected {{.Name}}Spec getSpec() {
        return new {{.Name}}Spec();
    }

    @Override
    protected Object getLifecycle() {
        return new Lifecycle();
    }
}
